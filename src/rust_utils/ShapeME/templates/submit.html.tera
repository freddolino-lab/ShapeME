{% import "macros" as m %}

<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width">
    <title>ShapeME</title>
    <link rel="stylesheet" href="/chota.min.css">
    <style>
      .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px 10px;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <h1>ShapeME submission form</h1>

      {% if errors | length > 1 %}
          <small class="text-error" style="margin-top: -20px">
              {{ errors | length }} field(s) have errors
          </small>
      {% endif %}

      <form action="/" method="post" enctype="multipart/form-data">
        {#
        <fieldset>
          <legend>User information</legend>
          <div class="row">
            <div class="col">
                {{ m::input(label="Name", type="text", name="account.name") }}
                <!-- required -->
            </div>
            <div class="col">
            {{ m::input(label="Email Address (to send you an email when your job has finished)", type="text", name="account.email") }}
              <!-- required pattern=".*@.*"/> -->
            </div>
          </div>

          <div class="row">
            <div class="col">
              {{ m::input(label="Password", type="password", name="account.password.first") }}
              <!--   required minlength="6"  /> -->
            </div>

            <div class="col">

            {{
                m::input(label="Confirm Password",
                type="password",
                name="account.password.second")
            }}

              <!--   required minlength="6"  /> -->
            </div>
          </div>
        </fieldset>
        #}

        <fieldset>
          <legend>Fasta file</legend>

          {{
              m::input(
                  label="Fasta file to upload (fasta, must end with '.fa')",
                  type="file",
                  name="submission.fa_file"
              )
          }}

          <!-- <input type="file" name="submission.fa_file" id="fa_file" required accept=".fa"> -->

        </fieldset>

        <fieldset>
          <legend>Score file</legend>

          {{
              m::input(
                  label="Scores file to upload (must have two columns, one header row, and *.txt suffix)",
                  type="file",
                  name="submission.score_file"
              )
          }}

          <!-- <input type="file" name="submission.score_file" id="score_file" required accept=".txt"> -->

        </fieldset>


        <fieldset>
          <legend>Job information</legend>

          <div class="row">
            <div class="col">
            {{ m::input(label="Job name", type="text", name="submission.name") }}
              <!-- required -->
            </div>
          </div>

          <div class="row">
            <div class="col">
              <label>Boolean Options (check to set to True, leave unchecked to set to False)</label>
              <br />
              {{ m::checkbox(name="cfg.force", label="Force", value="Force") }}
              <br />
              {{ m::checkbox(name="cfg.skip_inference", label="Skip inference (it's rare that you'll check this box)", value="Skip inference") }}
              <br />
              {{ m::checkbox(name="cfg.find_seq_motifs", label="Find sequence motifs", value="Find sequence motifs") }}
              <br />
              {{ m::checkbox(name="cfg.no_shape_motifs", label="Don't find shape motifs", value="Don't find shape motifs") }}
              <br />
              {{ m::checkbox(name="cfg.write_all_files", label="Write all model files", value="Write all model files") }}
              <br />
              {{ m::checkbox(name="cfg.exhaustive", label="Do an exhaustive initial search for seeds", value="Do an exhaustive initial search for seeds") }}
            </div>
          </div>

          {{ m::input_row(label="Sequence motif positive categories", type="text", name="cfg.seq_motif_positive_cats", value="9") }}
          {{ m::input_row(label="Number of folds for k-fold CV", type="text", name="cfg.crossval_folds", value="5") }}
          {{ m::input_row(label="kmer size (length of motif to search for)", type="text", name="cfg.kmer", value="10") }}
          {{ m::input_row(label="Max number of motif ocurrances to count on each strand", type="text", name="cfg.max_count", value="1") }}
          {{ m::input_row(label="If input scores are continuous, how many quantiles should they be binned into?", type="text", name="cfg.continuous", placeholder="If scores are already categorical, leave blank") }}
          {{ m::input_row(label="std dev from mean distance for initial threshold", type="text", name="cfg.threshold_sd", value="2.0") }}
          {{ m::input_row(label="number of seeds to use for setting initial threshold", type="text", name="cfg.init_threshold_seed_num", value="500") }}
          {{ m::input_row(label="number of records to evaluate distances for each initial seed for threshold setting", type="text", name="cfg.init_threshold_recs_per_seed", value="50") }}
          {{ m::input_row(label="number of windows in each record to calculate distance to initial seeds for threshold setting", type="text", name="cfg.init_threshold_windows_per_record", value="2") }}
          {{ m::input_row(label="How many batches of seeds should be searched without a new seed being found prior to moving on the motif optimization?", type="text", name="cfg.max_batch_no_new_seed", value="5") }}
          {{ m::input_row(label="Number of processors to use (the algorithm scales well up to 64 if you have to resources for it)", type="text", name="cfg.nprocs", value="1") }}
          {{ m::input_row(label="Lower limit on optimized  for threshold", type="text", name="cfg.lower_threshold_constraint", value="0") }}
          {{ m::input_row(label="Upper limit on optimized  for threshold", type="text", name="cfg.upper_threshold_constraint", value="2") }}
          {{ m::input_row(label="Lower limit on optimized  for shape values", type="text", name="cfg.lower_shape_constraint", value="-4") }}
          {{ m::input_row(label="Upper limit on optimized  for shape values", type="text", name="cfg.upper_shape_constraint", value="4") }}
          {{ m::input_row(label="Lower limit on optimized  for weights", type="text", name="cfg.lower_weights_constraint", value="-4") }}
          {{ m::input_row(label="Upper limit on optimized  for weights", type="text", name="cfg.upper_weights_constraint", value="4") }}
          {{ m::input_row(label="Starting temperature for simulated annealing optimization of motifs", type="text", name="cfg.temperature", value="1.0") }}
          {{ m::input_row(label="Fraction by which temperature should be decreased for each iteration of simulated annealing", type="text", name="cfg.t_adj", value="0.01") }}
          {{ m::input_row(label="How far can a  be shifted for a given iteration of simulated annealing", type="text", name="cfg.stepsize", value="0.25") }}
          {{ m::input_row(label="Number of iterations for simulated annealing", type="text", name="cfg.opt_niter", value="20000") }}
          {{ m::input_row(label="Clamp on weights s", type="text", name="cfg.alpha", value="0.1") }}
          {{ m::input_row(label="How many records should be evaluated in each batch of seed searching?", type="text", name="cfg.batch_size", value="500") }}
          {{ m::input_row(label="Maximum number of records to use. If the input data has more, a stratified random sample will be taken.", type="text", name="cfg.max_n", value="100000") }}
          {{ m::input_row(label="Logging level", type="text", name="cfg.log_level", value="debug") }}
 
        </fieldset>

        <br />
        <input type="submit" ="Submit" class="is-full-width" />
      </form>
    </div>
  </body>
</html>
